// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: server.proto

package nn_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClassifyNN_CreateOneTask_FullMethodName       = "/nn_go.ClassifyNN/CreateOneTask"
	ClassifyNN_CreateBatchTask_FullMethodName     = "/nn_go.ClassifyNN/CreateBatchTask"
	ClassifyNN_CreateBatchCodeTask_FullMethodName = "/nn_go.ClassifyNN/CreateBatchCodeTask"
)

// ClassifyNNClient is the client API for ClassifyNN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassifyNNClient interface {
	CreateOneTask(ctx context.Context, in *TaskOneRequest, opts ...grpc.CallOption) (*TaskOneResponse, error)
	CreateBatchTask(ctx context.Context, in *TaskBatchRequest, opts ...grpc.CallOption) (*TaskBatchResponse, error)
	CreateBatchCodeTask(ctx context.Context, in *TaskBatchRequest, opts ...grpc.CallOption) (*TaskBatchCodeResponse, error)
}

type classifyNNClient struct {
	cc grpc.ClientConnInterface
}

func NewClassifyNNClient(cc grpc.ClientConnInterface) ClassifyNNClient {
	return &classifyNNClient{cc}
}

func (c *classifyNNClient) CreateOneTask(ctx context.Context, in *TaskOneRequest, opts ...grpc.CallOption) (*TaskOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskOneResponse)
	err := c.cc.Invoke(ctx, ClassifyNN_CreateOneTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifyNNClient) CreateBatchTask(ctx context.Context, in *TaskBatchRequest, opts ...grpc.CallOption) (*TaskBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskBatchResponse)
	err := c.cc.Invoke(ctx, ClassifyNN_CreateBatchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifyNNClient) CreateBatchCodeTask(ctx context.Context, in *TaskBatchRequest, opts ...grpc.CallOption) (*TaskBatchCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskBatchCodeResponse)
	err := c.cc.Invoke(ctx, ClassifyNN_CreateBatchCodeTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassifyNNServer is the server API for ClassifyNN service.
// All implementations must embed UnimplementedClassifyNNServer
// for forward compatibility.
type ClassifyNNServer interface {
	CreateOneTask(context.Context, *TaskOneRequest) (*TaskOneResponse, error)
	CreateBatchTask(context.Context, *TaskBatchRequest) (*TaskBatchResponse, error)
	CreateBatchCodeTask(context.Context, *TaskBatchRequest) (*TaskBatchCodeResponse, error)
	mustEmbedUnimplementedClassifyNNServer()
}

// UnimplementedClassifyNNServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClassifyNNServer struct{}

func (UnimplementedClassifyNNServer) CreateOneTask(context.Context, *TaskOneRequest) (*TaskOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneTask not implemented")
}
func (UnimplementedClassifyNNServer) CreateBatchTask(context.Context, *TaskBatchRequest) (*TaskBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchTask not implemented")
}
func (UnimplementedClassifyNNServer) CreateBatchCodeTask(context.Context, *TaskBatchRequest) (*TaskBatchCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchCodeTask not implemented")
}
func (UnimplementedClassifyNNServer) mustEmbedUnimplementedClassifyNNServer() {}
func (UnimplementedClassifyNNServer) testEmbeddedByValue()                    {}

// UnsafeClassifyNNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassifyNNServer will
// result in compilation errors.
type UnsafeClassifyNNServer interface {
	mustEmbedUnimplementedClassifyNNServer()
}

func RegisterClassifyNNServer(s grpc.ServiceRegistrar, srv ClassifyNNServer) {
	// If the following call pancis, it indicates UnimplementedClassifyNNServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClassifyNN_ServiceDesc, srv)
}

func _ClassifyNN_CreateOneTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyNNServer).CreateOneTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifyNN_CreateOneTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyNNServer).CreateOneTask(ctx, req.(*TaskOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassifyNN_CreateBatchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyNNServer).CreateBatchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifyNN_CreateBatchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyNNServer).CreateBatchTask(ctx, req.(*TaskBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassifyNN_CreateBatchCodeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyNNServer).CreateBatchCodeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassifyNN_CreateBatchCodeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyNNServer).CreateBatchCodeTask(ctx, req.(*TaskBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassifyNN_ServiceDesc is the grpc.ServiceDesc for ClassifyNN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassifyNN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nn_go.ClassifyNN",
	HandlerType: (*ClassifyNNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneTask",
			Handler:    _ClassifyNN_CreateOneTask_Handler,
		},
		{
			MethodName: "CreateBatchTask",
			Handler:    _ClassifyNN_CreateBatchTask_Handler,
		},
		{
			MethodName: "CreateBatchCodeTask",
			Handler:    _ClassifyNN_CreateBatchCodeTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
